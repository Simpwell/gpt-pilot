{{ if files|length > 0}}
リクエストされたファイルは以下のとおりです。:
{% for file in files %}
**{{ file.name }}/{{ file.name }}**
```{# file.language #}
{{ file.content }}
```

{% endfor %}
{% else %}
現時点で、テストは書かれていません。

{% endif %}
では、自動テストの実装から始めましょう。

もし、あなたがCLIコマンドを実行する必要があるのであれば、以下のように書いて下さい。:
COMMAND: {command_that_needs_to_be_ran}

あなたの返答の最後に、あなたの指示に基づいて変更すべきすべてのファイルのファイル名を、以下のフォーマットで指定して下さい。:
FILES_CHANGED: ["file_name_1", "file_name_2", ..., "file_name_n"]

新しいファイルを作成する必要がある場合は、ファイルの最後に、作成する必要がある新しいファイルの配列を以下のフォーマットで記述して下さい。:
NEW_FILES: {new_files_array}

`new_files_array`はJSON配列で、配列の各項目は以下のキーを持つJSONオブジェクトでなければならない。:
`name` - プロジェクトのルートからの相対パスで指定したファイル名
`description` - このファイルに何が実装されているかの徹底的な説明。この説明により、私たちは、将来このファイルに新しいコードを入れる必要があるかどうか、知ることができる。現在このファイルに何が実装されているかを記述するのではなく、この記述を見た人が新しいコードを入れるべきかどうかを知ることができるような記述にしてください。

あなたは、複数のファイルにコードを書くことができる。あなたのタスクが完了したかどうかをプログラムで検証するためのテストも書く必要があることに留意して下さい。コマンドを実行する必要がある場合は、今すぐ実行できますが、そのコマンドが上記の他のステップに含まれていないことを確認してください。
