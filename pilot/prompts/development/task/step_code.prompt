要求されたファイルは以下の通り:
{% for file in files %}
**{{ file.name }}/{{ file.name }}**
```{{ file.language }}
{{ file.content }}
```

{% endfor %}

では、現在のステップの実装を始めよう。

もし、あなたがCLIコマンドを実行する場合、以下の通り書いてください。:
COMMAND: {command_that_needs_to_be_ran}

あなたの返答の最後に、あなたの指示に基づいて変更されるべきすべてのファイルのファイル名を、以下のフォーマットで指定してください。:
FILES_CHANGED: ["file_name_1", "file_name_2", ..., "file_name_n"]

あなたが新しいファイルを作成する必要がある場合は、作成する必要がある新しいファイル名の配列を以下のフォーマットでファイルの最後に記述してください。:
NEW_FILES: {new_files_array}

`new_files_array`はJSON配列です。配列の各項目は以下のキーを持つJSONオブジェクトである必要がある。:
`name` - ファイル名をプロジェクトのルートからの相対パスで指定する。
`description` - このファイルに何を入れるべきかの徹底的な説明。その説明により、将来、このファイルに新しいコードを入れる必要があるかどうかを知ることができる。現在このファイルに何が実装されているかを記述するのではなく、この記述を見た人が新しいコードを入れるべきかどうかを知ることができるような記述にしてください。

あなたは複数のファイルにコードを書くことができますが、タスクが完了したことをプログラムで検証するテストもあなたが書く必要があることを覚えておいてください。 自動テストは、決して開発用のファイル（.js、.py、.json など）を開いて、その中に何かが書かれているかどうかをテストしてはいけません。なぜなら、それをするとテストがもろくなり、コードの実装と密に結合してしまうからだ。自動テストは、コードの振る舞いや機能を検証することを目的とすべきであり、コードの内部構造や実装を検証すべきではありません。

あなたがコマンドを実行する必要がある場合は、今すぐ実行できますが、そのコマンドが上記の他のステップに含まれてい何もする必要がない場合は、`DONE`とだけ答え、他には何もしない。

何もする必要がない場合は、`DONE`とだけ答え、他には何もしないでください。

